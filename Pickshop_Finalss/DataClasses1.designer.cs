#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pickshop_Finalss
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PickShopDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insert_User(_User instance);
    partial void Update_User(_User instance);
    partial void Delete_User(_User instance);
    partial void InsertAvailability(Availability instance);
    partial void UpdateAvailability(Availability instance);
    partial void DeleteAvailability(Availability instance);
    partial void InsertImagePath(ImagePath instance);
    partial void UpdateImagePath(ImagePath instance);
    partial void DeleteImagePath(ImagePath instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductType(ProductType instance);
    partial void UpdateProductType(ProductType instance);
    partial void DeleteProductType(ProductType instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertReportStatu(ReportStatu instance);
    partial void UpdateReportStatu(ReportStatu instance);
    partial void DeleteReportStatu(ReportStatu instance);
    partial void InsertReportType(ReportType instance);
    partial void UpdateReportType(ReportType instance);
    partial void DeleteReportType(ReportType instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertUserStatu(UserStatu instance);
    partial void UpdateUserStatu(UserStatu instance);
    partial void DeleteUserStatu(UserStatu instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Pickshop_Finalss.Properties.Settings.Default.PickShopDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<_User> _Users
		{
			get
			{
				return this.GetTable<_User>();
			}
		}
		
		public System.Data.Linq.Table<Availability> Availabilities
		{
			get
			{
				return this.GetTable<Availability>();
			}
		}
		
		public System.Data.Linq.Table<ImagePath> ImagePaths
		{
			get
			{
				return this.GetTable<ImagePath>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductType> ProductTypes
		{
			get
			{
				return this.GetTable<ProductType>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<ReportStatu> ReportStatus
		{
			get
			{
				return this.GetTable<ReportStatu>();
			}
		}
		
		public System.Data.Linq.Table<ReportType> ReportTypes
		{
			get
			{
				return this.GetTable<ReportType>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<UserStatu> UserStatus
		{
			get
			{
				return this.GetTable<UserStatu>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_User]")]
	public partial class _User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _User_ID;
		
		private string _User_Name;
		
		private string _User_Pass;
		
		private string _User_Email;
		
		private string _User_Num;
		
		private string _Role_ID;
		
		private string _ImagePath_ID;
		
		private string _UStatus_ID;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<Report> _Reports;
		
		private EntityRef<ImagePath> _ImagePath;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<UserStatu> _UserStatu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(string value);
    partial void OnUser_IDChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnUser_PassChanging(string value);
    partial void OnUser_PassChanged();
    partial void OnUser_EmailChanging(string value);
    partial void OnUser_EmailChanged();
    partial void OnUser_NumChanging(string value);
    partial void OnUser_NumChanged();
    partial void OnRole_IDChanging(string value);
    partial void OnRole_IDChanged();
    partial void OnImagePath_IDChanging(string value);
    partial void OnImagePath_IDChanged();
    partial void OnUStatus_IDChanging(string value);
    partial void OnUStatus_IDChanged();
    #endregion
		
		public _User()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._ImagePath = default(EntityRef<ImagePath>);
			this._Role = default(EntityRef<Role>);
			this._UserStatu = default(EntityRef<UserStatu>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Pass", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_Pass
		{
			get
			{
				return this._User_Pass;
			}
			set
			{
				if ((this._User_Pass != value))
				{
					this.OnUser_PassChanging(value);
					this.SendPropertyChanging();
					this._User_Pass = value;
					this.SendPropertyChanged("User_Pass");
					this.OnUser_PassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Email", DbType="VarChar(50)")]
		public string User_Email
		{
			get
			{
				return this._User_Email;
			}
			set
			{
				if ((this._User_Email != value))
				{
					this.OnUser_EmailChanging(value);
					this.SendPropertyChanging();
					this._User_Email = value;
					this.SendPropertyChanged("User_Email");
					this.OnUser_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Num", DbType="VarChar(50)")]
		public string User_Num
		{
			get
			{
				return this._User_Num;
			}
			set
			{
				if ((this._User_Num != value))
				{
					this.OnUser_NumChanging(value);
					this.SendPropertyChanging();
					this._User_Num = value;
					this.SendPropertyChanged("User_Num");
					this.OnUser_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_ID", DbType="VarChar(10)")]
		public string Role_ID
		{
			get
			{
				return this._Role_ID;
			}
			set
			{
				if ((this._Role_ID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IDChanging(value);
					this.SendPropertyChanging();
					this._Role_ID = value;
					this.SendPropertyChanged("Role_ID");
					this.OnRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath_ID", DbType="VarChar(10)")]
		public string ImagePath_ID
		{
			get
			{
				return this._ImagePath_ID;
			}
			set
			{
				if ((this._ImagePath_ID != value))
				{
					if (this._ImagePath.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImagePath_IDChanging(value);
					this.SendPropertyChanging();
					this._ImagePath_ID = value;
					this.SendPropertyChanged("ImagePath_ID");
					this.OnImagePath_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UStatus_ID", DbType="VarChar(10)")]
		public string UStatus_ID
		{
			get
			{
				return this._UStatus_ID;
			}
			set
			{
				if ((this._UStatus_ID != value))
				{
					if (this._UserStatu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._UStatus_ID = value;
					this.SendPropertyChanged("UStatus_ID");
					this.OnUStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_User_Product", Storage="_Products", ThisKey="User_ID", OtherKey="User_ID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_User_Report", Storage="_Reports", ThisKey="User_ID", OtherKey="User_ID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImagePath__User", Storage="_ImagePath", ThisKey="ImagePath_ID", OtherKey="ImagePath_ID", IsForeignKey=true)]
		public ImagePath ImagePath
		{
			get
			{
				return this._ImagePath.Entity;
			}
			set
			{
				ImagePath previousValue = this._ImagePath.Entity;
				if (((previousValue != value) 
							|| (this._ImagePath.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImagePath.Entity = null;
						previousValue._Users.Remove(this);
					}
					this._ImagePath.Entity = value;
					if ((value != null))
					{
						value._Users.Add(this);
						this._ImagePath_ID = value.ImagePath_ID;
					}
					else
					{
						this._ImagePath_ID = default(string);
					}
					this.SendPropertyChanged("ImagePath");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role__User", Storage="_Role", ThisKey="Role_ID", OtherKey="Role_ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue._Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value._Users.Add(this);
						this._Role_ID = value.Role_ID;
					}
					else
					{
						this._Role_ID = default(string);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStatu__User", Storage="_UserStatu", ThisKey="UStatus_ID", OtherKey="UStatus_ID", IsForeignKey=true)]
		public UserStatu UserStatu
		{
			get
			{
				return this._UserStatu.Entity;
			}
			set
			{
				UserStatu previousValue = this._UserStatu.Entity;
				if (((previousValue != value) 
							|| (this._UserStatu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserStatu.Entity = null;
						previousValue._Users.Remove(this);
					}
					this._UserStatu.Entity = value;
					if ((value != null))
					{
						value._Users.Add(this);
						this._UStatus_ID = value.UStatus_ID;
					}
					else
					{
						this._UStatus_ID = default(string);
					}
					this.SendPropertyChanged("UserStatu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity._User = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity._User = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity._User = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity._User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Availability")]
	public partial class Availability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Avail_ID;
		
		private string _Avail_Desc;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAvail_IDChanging(string value);
    partial void OnAvail_IDChanged();
    partial void OnAvail_DescChanging(string value);
    partial void OnAvail_DescChanged();
    #endregion
		
		public Availability()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avail_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Avail_ID
		{
			get
			{
				return this._Avail_ID;
			}
			set
			{
				if ((this._Avail_ID != value))
				{
					this.OnAvail_IDChanging(value);
					this.SendPropertyChanging();
					this._Avail_ID = value;
					this.SendPropertyChanged("Avail_ID");
					this.OnAvail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avail_Desc", DbType="VarChar(50)")]
		public string Avail_Desc
		{
			get
			{
				return this._Avail_Desc;
			}
			set
			{
				if ((this._Avail_Desc != value))
				{
					this.OnAvail_DescChanging(value);
					this.SendPropertyChanging();
					this._Avail_Desc = value;
					this.SendPropertyChanged("Avail_Desc");
					this.OnAvail_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Availability_Product", Storage="_Products", ThisKey="Avail_ID", OtherKey="Avail_ID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Availability = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Availability = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImagePath")]
	public partial class ImagePath : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ImagePath_ID;
		
		private string _ImagePath_Desc;
		
		private EntitySet<_User> @__Users;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImagePath_IDChanging(string value);
    partial void OnImagePath_IDChanged();
    partial void OnImagePath_DescChanging(string value);
    partial void OnImagePath_DescChanged();
    #endregion
		
		public ImagePath()
		{
			this.@__Users = new EntitySet<_User>(new Action<_User>(this.attach__Users), new Action<_User>(this.detach__Users));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ImagePath_ID
		{
			get
			{
				return this._ImagePath_ID;
			}
			set
			{
				if ((this._ImagePath_ID != value))
				{
					this.OnImagePath_IDChanging(value);
					this.SendPropertyChanging();
					this._ImagePath_ID = value;
					this.SendPropertyChanged("ImagePath_ID");
					this.OnImagePath_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath_Desc", DbType="VarChar(255)")]
		public string ImagePath_Desc
		{
			get
			{
				return this._ImagePath_Desc;
			}
			set
			{
				if ((this._ImagePath_Desc != value))
				{
					this.OnImagePath_DescChanging(value);
					this.SendPropertyChanging();
					this._ImagePath_Desc = value;
					this.SendPropertyChanged("ImagePath_Desc");
					this.OnImagePath_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImagePath__User", Storage="__Users", ThisKey="ImagePath_ID", OtherKey="ImagePath_ID")]
		public EntitySet<_User> _Users
		{
			get
			{
				return this.@__Users;
			}
			set
			{
				this.@__Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImagePath_Product", Storage="_Products", ThisKey="ImagePath_ID", OtherKey="ImagePath_ID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__Users(_User entity)
		{
			this.SendPropertyChanging();
			entity.ImagePath = this;
		}
		
		private void detach__Users(_User entity)
		{
			this.SendPropertyChanging();
			entity.ImagePath = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ImagePath = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ImagePath = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Product_ID;
		
		private string _Product_Name;
		
		private string _Product_Quantity;
		
		private string _Product_Desc;
		
		private string _User_ID;
		
		private string _PType_ID;
		
		private string _Avail_ID;
		
		private string _ImagePath_ID;
		
		private System.Nullable<double> _Price;
		
		private EntityRef<Availability> _Availability;
		
		private EntityRef<ImagePath> _ImagePath;
		
		private EntityRef<_User> @__User;
		
		private EntityRef<ProductType> _ProductType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_IDChanging(string value);
    partial void OnProduct_IDChanged();
    partial void OnProduct_NameChanging(string value);
    partial void OnProduct_NameChanged();
    partial void OnProduct_QuantityChanging(string value);
    partial void OnProduct_QuantityChanged();
    partial void OnProduct_DescChanging(string value);
    partial void OnProduct_DescChanged();
    partial void OnUser_IDChanging(string value);
    partial void OnUser_IDChanged();
    partial void OnPType_IDChanging(string value);
    partial void OnPType_IDChanged();
    partial void OnAvail_IDChanging(string value);
    partial void OnAvail_IDChanged();
    partial void OnImagePath_IDChanging(string value);
    partial void OnImagePath_IDChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    #endregion
		
		public Product()
		{
			this._Availability = default(EntityRef<Availability>);
			this._ImagePath = default(EntityRef<ImagePath>);
			this.@__User = default(EntityRef<_User>);
			this._ProductType = default(EntityRef<ProductType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Product_ID
		{
			get
			{
				return this._Product_ID;
			}
			set
			{
				if ((this._Product_ID != value))
				{
					this.OnProduct_IDChanging(value);
					this.SendPropertyChanging();
					this._Product_ID = value;
					this.SendPropertyChanged("Product_ID");
					this.OnProduct_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Name
		{
			get
			{
				return this._Product_Name;
			}
			set
			{
				if ((this._Product_Name != value))
				{
					this.OnProduct_NameChanging(value);
					this.SendPropertyChanging();
					this._Product_Name = value;
					this.SendPropertyChanged("Product_Name");
					this.OnProduct_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Quantity", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Product_Quantity
		{
			get
			{
				return this._Product_Quantity;
			}
			set
			{
				if ((this._Product_Quantity != value))
				{
					this.OnProduct_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Product_Quantity = value;
					this.SendPropertyChanged("Product_Quantity");
					this.OnProduct_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Desc", DbType="VarChar(50)")]
		public string Product_Desc
		{
			get
			{
				return this._Product_Desc;
			}
			set
			{
				if ((this._Product_Desc != value))
				{
					this.OnProduct_DescChanging(value);
					this.SendPropertyChanging();
					this._Product_Desc = value;
					this.SendPropertyChanged("Product_Desc");
					this.OnProduct_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="VarChar(10)")]
		public string User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this.@__User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PType_ID", DbType="VarChar(10)")]
		public string PType_ID
		{
			get
			{
				return this._PType_ID;
			}
			set
			{
				if ((this._PType_ID != value))
				{
					if (this._ProductType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPType_IDChanging(value);
					this.SendPropertyChanging();
					this._PType_ID = value;
					this.SendPropertyChanged("PType_ID");
					this.OnPType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avail_ID", DbType="VarChar(10)")]
		public string Avail_ID
		{
			get
			{
				return this._Avail_ID;
			}
			set
			{
				if ((this._Avail_ID != value))
				{
					if (this._Availability.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAvail_IDChanging(value);
					this.SendPropertyChanging();
					this._Avail_ID = value;
					this.SendPropertyChanged("Avail_ID");
					this.OnAvail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath_ID", DbType="VarChar(10)")]
		public string ImagePath_ID
		{
			get
			{
				return this._ImagePath_ID;
			}
			set
			{
				if ((this._ImagePath_ID != value))
				{
					if (this._ImagePath.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImagePath_IDChanging(value);
					this.SendPropertyChanging();
					this._ImagePath_ID = value;
					this.SendPropertyChanged("ImagePath_ID");
					this.OnImagePath_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Availability_Product", Storage="_Availability", ThisKey="Avail_ID", OtherKey="Avail_ID", IsForeignKey=true)]
		public Availability Availability
		{
			get
			{
				return this._Availability.Entity;
			}
			set
			{
				Availability previousValue = this._Availability.Entity;
				if (((previousValue != value) 
							|| (this._Availability.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Availability.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Availability.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._Avail_ID = value.Avail_ID;
					}
					else
					{
						this._Avail_ID = default(string);
					}
					this.SendPropertyChanged("Availability");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImagePath_Product", Storage="_ImagePath", ThisKey="ImagePath_ID", OtherKey="ImagePath_ID", IsForeignKey=true)]
		public ImagePath ImagePath
		{
			get
			{
				return this._ImagePath.Entity;
			}
			set
			{
				ImagePath previousValue = this._ImagePath.Entity;
				if (((previousValue != value) 
							|| (this._ImagePath.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImagePath.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ImagePath.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ImagePath_ID = value.ImagePath_ID;
					}
					else
					{
						this._ImagePath_ID = default(string);
					}
					this.SendPropertyChanged("ImagePath");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_User_Product", Storage="__User", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public _User _User
		{
			get
			{
				return this.@__User.Entity;
			}
			set
			{
				_User previousValue = this.@__User.Entity;
				if (((previousValue != value) 
							|| (this.@__User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__User.Entity = null;
						previousValue.Products.Remove(this);
					}
					this.@__User.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(string);
					}
					this.SendPropertyChanged("_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_Product", Storage="_ProductType", ThisKey="PType_ID", OtherKey="PType_ID", IsForeignKey=true)]
		public ProductType ProductType
		{
			get
			{
				return this._ProductType.Entity;
			}
			set
			{
				ProductType previousValue = this._ProductType.Entity;
				if (((previousValue != value) 
							|| (this._ProductType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductType.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductType.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._PType_ID = value.PType_ID;
					}
					else
					{
						this._PType_ID = default(string);
					}
					this.SendPropertyChanged("ProductType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductType")]
	public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PType_ID;
		
		private string _PType_Desc;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPType_IDChanging(string value);
    partial void OnPType_IDChanged();
    partial void OnPType_DescChanging(string value);
    partial void OnPType_DescChanged();
    #endregion
		
		public ProductType()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PType_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PType_ID
		{
			get
			{
				return this._PType_ID;
			}
			set
			{
				if ((this._PType_ID != value))
				{
					this.OnPType_IDChanging(value);
					this.SendPropertyChanging();
					this._PType_ID = value;
					this.SendPropertyChanged("PType_ID");
					this.OnPType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PType_Desc", DbType="VarChar(50)")]
		public string PType_Desc
		{
			get
			{
				return this._PType_Desc;
			}
			set
			{
				if ((this._PType_Desc != value))
				{
					this.OnPType_DescChanging(value);
					this.SendPropertyChanging();
					this._PType_Desc = value;
					this.SendPropertyChanged("PType_Desc");
					this.OnPType_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductType_Product", Storage="_Products", ThisKey="PType_ID", OtherKey="PType_ID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Report_ID;
		
		private string _User_ID;
		
		private string _RType_ID;
		
		private string _RStatus;
		
		private EntitySet<Staff> _Staffs;
		
		private EntityRef<_User> @__User;
		
		private EntityRef<ReportStatu> _ReportStatu;
		
		private EntityRef<ReportType> _ReportType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReport_IDChanging(string value);
    partial void OnReport_IDChanged();
    partial void OnUser_IDChanging(string value);
    partial void OnUser_IDChanged();
    partial void OnRType_IDChanging(string value);
    partial void OnRType_IDChanged();
    partial void OnRStatusChanging(string value);
    partial void OnRStatusChanged();
    #endregion
		
		public Report()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this.@__User = default(EntityRef<_User>);
			this._ReportStatu = default(EntityRef<ReportStatu>);
			this._ReportType = default(EntityRef<ReportType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Report_ID
		{
			get
			{
				return this._Report_ID;
			}
			set
			{
				if ((this._Report_ID != value))
				{
					this.OnReport_IDChanging(value);
					this.SendPropertyChanging();
					this._Report_ID = value;
					this.SendPropertyChanged("Report_ID");
					this.OnReport_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="VarChar(10)")]
		public string User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this.@__User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RType_ID", DbType="VarChar(10)")]
		public string RType_ID
		{
			get
			{
				return this._RType_ID;
			}
			set
			{
				if ((this._RType_ID != value))
				{
					if (this._ReportType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRType_IDChanging(value);
					this.SendPropertyChanging();
					this._RType_ID = value;
					this.SendPropertyChanged("RType_ID");
					this.OnRType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RStatus", DbType="VarChar(10)")]
		public string RStatus
		{
			get
			{
				return this._RStatus;
			}
			set
			{
				if ((this._RStatus != value))
				{
					if (this._ReportStatu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRStatusChanging(value);
					this.SendPropertyChanging();
					this._RStatus = value;
					this.SendPropertyChanged("RStatus");
					this.OnRStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_Staff", Storage="_Staffs", ThisKey="Report_ID", OtherKey="Report_ID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_User_Report", Storage="__User", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public _User _User
		{
			get
			{
				return this.@__User.Entity;
			}
			set
			{
				_User previousValue = this.@__User.Entity;
				if (((previousValue != value) 
							|| (this.@__User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__User.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this.@__User.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(string);
					}
					this.SendPropertyChanged("_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportStatu_Report", Storage="_ReportStatu", ThisKey="RStatus", OtherKey="RStatus_ID", IsForeignKey=true)]
		public ReportStatu ReportStatu
		{
			get
			{
				return this._ReportStatu.Entity;
			}
			set
			{
				ReportStatu previousValue = this._ReportStatu.Entity;
				if (((previousValue != value) 
							|| (this._ReportStatu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportStatu.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._ReportStatu.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._RStatus = value.RStatus_ID;
					}
					else
					{
						this._RStatus = default(string);
					}
					this.SendPropertyChanged("ReportStatu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportType_Report", Storage="_ReportType", ThisKey="RType_ID", OtherKey="RType_ID", IsForeignKey=true)]
		public ReportType ReportType
		{
			get
			{
				return this._ReportType.Entity;
			}
			set
			{
				ReportType previousValue = this._ReportType.Entity;
				if (((previousValue != value) 
							|| (this._ReportType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportType.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._ReportType.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._RType_ID = value.RType_ID;
					}
					else
					{
						this._RType_ID = default(string);
					}
					this.SendPropertyChanged("ReportType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportStatu")]
	public partial class ReportStatu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RStatus_ID;
		
		private string _RStatus_Desc;
		
		private EntitySet<Report> _Reports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRStatus_IDChanging(string value);
    partial void OnRStatus_IDChanged();
    partial void OnRStatus_DescChanging(string value);
    partial void OnRStatus_DescChanged();
    #endregion
		
		public ReportStatu()
		{
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RStatus_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RStatus_ID
		{
			get
			{
				return this._RStatus_ID;
			}
			set
			{
				if ((this._RStatus_ID != value))
				{
					this.OnRStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._RStatus_ID = value;
					this.SendPropertyChanged("RStatus_ID");
					this.OnRStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RStatus_Desc", DbType="VarChar(50)")]
		public string RStatus_Desc
		{
			get
			{
				return this._RStatus_Desc;
			}
			set
			{
				if ((this._RStatus_Desc != value))
				{
					this.OnRStatus_DescChanging(value);
					this.SendPropertyChanging();
					this._RStatus_Desc = value;
					this.SendPropertyChanged("RStatus_Desc");
					this.OnRStatus_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportStatu_Report", Storage="_Reports", ThisKey="RStatus_ID", OtherKey="RStatus")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.ReportStatu = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.ReportStatu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportType")]
	public partial class ReportType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RType_ID;
		
		private string _RType_Desc;
		
		private EntitySet<Report> _Reports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRType_IDChanging(string value);
    partial void OnRType_IDChanged();
    partial void OnRType_DescChanging(string value);
    partial void OnRType_DescChanged();
    #endregion
		
		public ReportType()
		{
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RType_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RType_ID
		{
			get
			{
				return this._RType_ID;
			}
			set
			{
				if ((this._RType_ID != value))
				{
					this.OnRType_IDChanging(value);
					this.SendPropertyChanging();
					this._RType_ID = value;
					this.SendPropertyChanged("RType_ID");
					this.OnRType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RType_Desc", DbType="VarChar(50)")]
		public string RType_Desc
		{
			get
			{
				return this._RType_Desc;
			}
			set
			{
				if ((this._RType_Desc != value))
				{
					this.OnRType_DescChanging(value);
					this.SendPropertyChanging();
					this._RType_Desc = value;
					this.SendPropertyChanged("RType_Desc");
					this.OnRType_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportType_Report", Storage="_Reports", ThisKey="RType_ID", OtherKey="RType_ID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.ReportType = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.ReportType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Role_ID;
		
		private string _Role_Name;
		
		private EntitySet<_User> @__Users;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_IDChanging(string value);
    partial void OnRole_IDChanged();
    partial void OnRole_NameChanging(string value);
    partial void OnRole_NameChanged();
    #endregion
		
		public Role()
		{
			this.@__Users = new EntitySet<_User>(new Action<_User>(this.attach__Users), new Action<_User>(this.detach__Users));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Role_ID
		{
			get
			{
				return this._Role_ID;
			}
			set
			{
				if ((this._Role_ID != value))
				{
					this.OnRole_IDChanging(value);
					this.SendPropertyChanging();
					this._Role_ID = value;
					this.SendPropertyChanged("Role_ID");
					this.OnRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Name", DbType="VarChar(50)")]
		public string Role_Name
		{
			get
			{
				return this._Role_Name;
			}
			set
			{
				if ((this._Role_Name != value))
				{
					this.OnRole_NameChanging(value);
					this.SendPropertyChanging();
					this._Role_Name = value;
					this.SendPropertyChanged("Role_Name");
					this.OnRole_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role__User", Storage="__Users", ThisKey="Role_ID", OtherKey="Role_ID")]
		public EntitySet<_User> _Users
		{
			get
			{
				return this.@__Users;
			}
			set
			{
				this.@__Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Staff", Storage="_Staffs", ThisKey="Role_ID", OtherKey="Role_ID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__Users(_User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach__Users(_User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Staff_ID;
		
		private string _Staff_Name;
		
		private string _Staff_Pass;
		
		private string _Staff_Email;
		
		private string _Staff_Num;
		
		private string _Role_ID;
		
		private string _Report_ID;
		
		private EntityRef<Report> _Report;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    partial void OnStaff_NameChanging(string value);
    partial void OnStaff_NameChanged();
    partial void OnStaff_PassChanging(string value);
    partial void OnStaff_PassChanged();
    partial void OnStaff_EmailChanging(string value);
    partial void OnStaff_EmailChanged();
    partial void OnStaff_NumChanging(string value);
    partial void OnStaff_NumChanged();
    partial void OnRole_IDChanging(string value);
    partial void OnRole_IDChanged();
    partial void OnReport_IDChanging(string value);
    partial void OnReport_IDChanged();
    #endregion
		
		public Staff()
		{
			this._Report = default(EntityRef<Report>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Name
		{
			get
			{
				return this._Staff_Name;
			}
			set
			{
				if ((this._Staff_Name != value))
				{
					this.OnStaff_NameChanging(value);
					this.SendPropertyChanging();
					this._Staff_Name = value;
					this.SendPropertyChanged("Staff_Name");
					this.OnStaff_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Pass", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Pass
		{
			get
			{
				return this._Staff_Pass;
			}
			set
			{
				if ((this._Staff_Pass != value))
				{
					this.OnStaff_PassChanging(value);
					this.SendPropertyChanging();
					this._Staff_Pass = value;
					this.SendPropertyChanged("Staff_Pass");
					this.OnStaff_PassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Email
		{
			get
			{
				return this._Staff_Email;
			}
			set
			{
				if ((this._Staff_Email != value))
				{
					this.OnStaff_EmailChanging(value);
					this.SendPropertyChanging();
					this._Staff_Email = value;
					this.SendPropertyChanged("Staff_Email");
					this.OnStaff_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Num", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Num
		{
			get
			{
				return this._Staff_Num;
			}
			set
			{
				if ((this._Staff_Num != value))
				{
					this.OnStaff_NumChanging(value);
					this.SendPropertyChanging();
					this._Staff_Num = value;
					this.SendPropertyChanged("Staff_Num");
					this.OnStaff_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_ID", DbType="VarChar(10)")]
		public string Role_ID
		{
			get
			{
				return this._Role_ID;
			}
			set
			{
				if ((this._Role_ID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IDChanging(value);
					this.SendPropertyChanging();
					this._Role_ID = value;
					this.SendPropertyChanged("Role_ID");
					this.OnRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_ID", DbType="VarChar(10)")]
		public string Report_ID
		{
			get
			{
				return this._Report_ID;
			}
			set
			{
				if ((this._Report_ID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReport_IDChanging(value);
					this.SendPropertyChanging();
					this._Report_ID = value;
					this.SendPropertyChanged("Report_ID");
					this.OnReport_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_Staff", Storage="_Report", ThisKey="Report_ID", OtherKey="Report_ID", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._Report_ID = value.Report_ID;
					}
					else
					{
						this._Report_ID = default(string);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Staff", Storage="_Role", ThisKey="Role_ID", OtherKey="Role_ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._Role_ID = value.Role_ID;
					}
					else
					{
						this._Role_ID = default(string);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserStatu")]
	public partial class UserStatu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UStatus_ID;
		
		private string _UStatus_Desc;
		
		private EntitySet<_User> @__Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUStatus_IDChanging(string value);
    partial void OnUStatus_IDChanged();
    partial void OnUStatus_DescChanging(string value);
    partial void OnUStatus_DescChanged();
    #endregion
		
		public UserStatu()
		{
			this.@__Users = new EntitySet<_User>(new Action<_User>(this.attach__Users), new Action<_User>(this.detach__Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UStatus_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UStatus_ID
		{
			get
			{
				return this._UStatus_ID;
			}
			set
			{
				if ((this._UStatus_ID != value))
				{
					this.OnUStatus_IDChanging(value);
					this.SendPropertyChanging();
					this._UStatus_ID = value;
					this.SendPropertyChanged("UStatus_ID");
					this.OnUStatus_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UStatus_Desc", DbType="VarChar(50)")]
		public string UStatus_Desc
		{
			get
			{
				return this._UStatus_Desc;
			}
			set
			{
				if ((this._UStatus_Desc != value))
				{
					this.OnUStatus_DescChanging(value);
					this.SendPropertyChanging();
					this._UStatus_Desc = value;
					this.SendPropertyChanged("UStatus_Desc");
					this.OnUStatus_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStatu__User", Storage="__Users", ThisKey="UStatus_ID", OtherKey="UStatus_ID")]
		public EntitySet<_User> _Users
		{
			get
			{
				return this.@__Users;
			}
			set
			{
				this.@__Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__Users(_User entity)
		{
			this.SendPropertyChanging();
			entity.UserStatu = this;
		}
		
		private void detach__Users(_User entity)
		{
			this.SendPropertyChanging();
			entity.UserStatu = null;
		}
	}
}
#pragma warning restore 1591
